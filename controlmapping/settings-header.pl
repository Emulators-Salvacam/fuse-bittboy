#!/usr/bin/perl -w

# settings-header.pl: generate controlmappingsettings.h from settings.dat
# Copyright (c) 2020 Pedro Luis Rodríguez González

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Author contact information:

# E-mail: pl.rguez@gmail.com

use strict;

use lib 'perl';

use Fuse;

my %options;

while(<>) {

    next if /^\s*$/;
    next if /^\s*#/;

    chomp;

    my( $name, $type, $default, $short, $commandline, $configfile ) =
	split /\s*,\s*/;

    if( not defined $commandline ) {
	$commandline = $name;
	$commandline =~ s/_/-/g;
    }

    if( not defined $configfile ) {
	$configfile = $commandline;
	$configfile =~ s/-//g;
    }


    next if !($name =~ /^joystick/);

    $options{$name} = { type => $type, default => $default, short => $short,
			commandline => $commandline,
			configfile => $configfile };
}

print Fuse::GPL( 'controlmappingsettings.h: Handling control mapping settings',
                 '2001-2003 Philip Kendall & 2020 Pedro Luis RodrÃ­guez GonzÃ¡lez' );

print << 'CODE';

/* This file is autogenerated from settings.dat by settings-header.pl.
   Do not edit unless you know what will happen! */

#ifndef FUSE_CONTROL_MAPPING_SETTINGS_H
#define FUSE_CONTROL_MAPPING_SETTINGS_H

#include <sys/types.h>

#include "settings.h"

typedef struct control_mapping_info {

CODE

foreach my $name ( sort keys %options ) {

    my $type = $options{$name}->{type};

    if( $type eq 'boolean' or $type eq 'numeric' ) {
	print "   int $name;\n";
    } elsif( $type eq 'string' ) {
	print "  char *$name;\n";
    } elsif( $type eq 'null' ) {
	# Do nothing
    } else {
	die "Unknown setting type `$type'";
    }

}

print << 'CODE';

} control_mapping_info;

extern control_mapping_info control_mapping_current;
extern control_mapping_info control_mapping_default;
extern control_mapping_info control_mapping_default_old;

extern settings_info settings_old;

#define DEFAULT_MAPPING_FILE "default.fcm"

extern char *mapfile;
extern char *defaultmapfile;

char* get_mapping_filename( const char* filename );

void control_mapping_defaults( control_mapping_info *control_mapping );
void control_mapping_copy( control_mapping_info *dest, control_mapping_info *src );
void control_mapping_copy_from_settings( control_mapping_info *dest, settings_info *src );
void control_mapping_copy_to_settings( settings_info *dest, control_mapping_info *src );

void control_mapping_set_string( char **string_setting, const char *value );

int control_mapping_something_changed( control_mapping_info *dest, settings_info *src );

int control_mapping_free( control_mapping_info *control_mapping );
int control_mapping_settings_free( settings_info *control_mapping );

int control_mapping_read_config_file( control_mapping_info *control_mapping, const char *filename );
int control_mapping_write_config( control_mapping_info *control_mapping, const char *filename );

void control_mapping_register_startup( void );
int  control_mapping_init( void *context );

#endif				/* #ifndef FUSE_CONTROL_MAPPING_SETTINGS_H */
CODE
